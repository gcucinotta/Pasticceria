@page "/dolcidetail/{IDDolce}"

@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@inject Radzen.DialogService myDialogService
@inject Data.Service.CustomHttpClient myCustomHttpClient
@inject Data.Service.AppSettings myAppSettings
@inject HttpClient myHttp
@inject NotificationService myNotificationService

@if (dolce == null)
{
}
else
{
    <div class="row form-group">
        <div class="col-1">
            <div><b>ID</b></div>
            <label>@dolce.ID</label>
        </div>
        <div class="col-4">
            <div><b>Nome</b></div>
            <RadzenTextBox @bind-Value="dolce.Nome" Style="width:100%" />
        </div>
        <div class="col-2">
            <div><b>Data di vendita</b></div>
            <RadzenDatePicker @bind-Value=@dolce.DataVendita DateFormat="d" Style="width:100%" />
        </div>
        <div class="col-2">
            <div><b>Qta</b></div>
            <RadzenNumeric TValue="int" Format="0" @bind-Value="@dolce.Qta" Style="width:100%" />
        </div>
        <div class="col-2">
            <div><b>Prezzo</b></div>
            <RadzenNumeric TValue="decimal" Format="0.00" @bind-Value="@dolce.Prezzo" Step="0.5" Style="width:100%" />
        </div>
        <div class="col-1">
            <div><b>Vetrina</b></div>
            <RadzenSwitch @bind-Value=@dolce.IsVetrina Style="margin-bottom: 20px" />
        </div>
    </div>
    <div class="row form-group">
        <div class="col-12">
            <h4>LISTA INGREDIENTI</h4>
            <RadzenDataGrid @ref="@myIngGrid" AllowFiltering="true" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            Data="@(dolce.Ingredienti.Where(o => o.IDDolce == IDDolce))" TItem="Data.Entity.Ingrediente" ColumnWidth="200px">
                <Columns>
                    <RadzenDataGridColumn Width="50px" TItem="Data.Entity.Ingrediente" Property="ID" TextAlign="TextAlign.Center" Filterable="false" Sortable="false">
                        <Template Context="Data">
                            <i title="Modifica" style="color: navy; cursor: pointer" class="oi oi-pencil" @onclick="@(() => editIngrediente(@Data))"></i>
                            &nbsp;&nbsp;
                            <i class="oi oi-trash" title="Elimina" style="color:navy; cursor:pointer" @onclick="@(() => delIngrediente(@Data))"></i>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Data.Entity.Ingrediente" Property="Nome" Title="Nome" />
                    <RadzenDataGridColumn TItem="Data.Entity.Ingrediente" Property="Qta" Title="Quantita" Width="50px" />
                    <RadzenDataGridColumn TItem="Data.Entity.Ingrediente" Property="UnitaMisura" Title="Unita di misura" Width="120px" />
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
    <div class="row form-group">
        <div class="col-5"><Radzen.Blazor.RadzenButton ButtonType="ButtonType.Button" Icon="add_circle" ButtonStyle="ButtonStyle.Secondary" Text="AGGIUNGI INGREDIENTE" Click="@(() => addIngrediente())" /></div>
        <div class="col-7 text-right">
            Ingredienti presenti nel dolce <b style="color:navy">@dolce.Ingredienti.Count()</b>
        </div>
    </div>
    <div class="row">
        <div class="col-12 text-right">
            <RadzenButton Click="@(() => onSave())" ButtonStyle="ButtonStyle.Secondary" Text="SALVA" Style="margin-bottom: 10px; width: 150px" />
            <RadzenButton Click="@((args) => myDialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="ANNULLA" Style="margin-bottom: 10px; width: 150px" />
        </div>
    </div>
}

@code {
        [Parameter] public int IDDolce { get; set; }
        string baseUrl;
        RadzenDataGrid<Data.Entity.Ingrediente> myIngGrid;
        List<Data.Entity.Ingrediente> listDeleted;

        Data.Entity.Dolce dolce;

    protected override async Task OnInitializedAsync()
    {
        baseUrl = myAppSettings.GetBaseUrl();
        if (IDDolce == 0)
        {
            dolce = new Data.Entity.Dolce();
            dolce.DataVendita = DateTime.Now.Date;
            dolce.Ingredienti = new List<Data.Entity.Ingrediente>();
        }
        else
        {
            dolce = await myCustomHttpClient.GetJsonAsync<Data.Entity.Dolce>(baseUrl + "/api/dolci/details/" + IDDolce);

            dolce.Ingredienti = await myCustomHttpClient.GetJsonAsync<List<Data.Entity.Ingrediente>>(baseUrl + "/api/ingredienti/findbyiddolce/" + IDDolce);
        }

        listDeleted = new List<Data.Entity.Ingrediente>();

        myDialogService.OnOpen += Open;
        myDialogService.OnClose += Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        return;
    }

    void Close(dynamic result)
    {
        bool b = result is Data.Entity.Ingrediente;
        if (b)
        {
            Data.Entity.Ingrediente ing = (Data.Entity.Ingrediente)result;
            if (ing.ID == 0)
            {
                dolce.Ingredienti.Add(result);
            }
        }
    }

    async Task delIngrediente(Data.Entity.Ingrediente myIngrediente)
    {
        var confirmResult = await myDialogService.Confirm("Confermi ?", "Attenzione", new ConfirmOptions() { OkButtonText = "SI", CancelButtonText = "NO" });
        if (confirmResult.HasValue && confirmResult.Value)
        {
            listDeleted.Add(myIngrediente);
            dolce.Ingredienti.Remove(myIngrediente);
        }
    }

    async Task addIngrediente()
    {
        await myDialogService.OpenAsync<IngredienteDetail>("Inserimento nuovo ingrediente",
            new Dictionary<string, object>() { { "Ingrediente", new Data.Entity.Ingrediente() }, { "Dolce", dolce } },
            new DialogOptions() { Width = "600px", Height = "400px", Resizable = true, Draggable = true });
    }

    async Task editIngrediente(Data.Entity.Ingrediente myIngrediente)
    {
        await myDialogService.OpenAsync<IngredienteDetail>("Modifica ingrediente",
                new Dictionary<string, object>() { { "Ingrediente", myIngrediente }, { "Dolce", dolce } },
                new DialogOptions() { Width = "600px", Height = "400px", Resizable = true, Draggable = true });
    }

    async Task onSave()
    {
        if (isEmtpyField())
        {
            Messagge("Attezione!", "Valorizzare tutti i campi.", NotificationSeverity.Warning);
            return;
        }

        if (await isDolceExists()) {
            Messagge("Attezione!", "Dolce già presente in archivio.", NotificationSeverity.Warning);
            return;
        }

        HttpResponseMessage responseMessage;
        // Salvataggio testata dolce ...
        if (dolce.ID == 0)
            responseMessage = await myCustomHttpClient.PostJsonAsync(baseUrl + "/api/dolci/create", dolce);
        else
            responseMessage = await myCustomHttpClient.PutJsonAsync(baseUrl + "/api/dolci/edit/" + dolce.ID, dolce);

        if (responseMessage.IsSuccessStatusCode)
        {
            int idDolce = dolce.ID;
            if (dolce.ID == 0)
            {
                var response = responseMessage.Content.ReadAsStringAsync();
                idDolce = Convert.ToInt32(response.Result);
            }

            // Salvataggio ingredienti ...
            foreach (Data.Entity.Ingrediente ing in dolce.Ingredienti)
            {
                ing.IDDolce = idDolce;

                // Effettuo la chiamata al db ...
                Data.Entity.Ingrediente ingDb = await myCustomHttpClient.GetJsonAsync<Data.Entity.Ingrediente>(baseUrl + "/api/ingredienti/details/" + ing.ID);
                if (ingDb == null)
                {
                    // Non esiste, lo inserisco ...
                    responseMessage = await myCustomHttpClient.PostJsonAsync(baseUrl + "/api/ingredienti/create", ing);
                    if (!responseMessage.IsSuccessStatusCode)
                    {
                        return;
                    }
                }
                else
                {
                    // Controllo se è diverso, nel caso lo aggiorno ...
                    string jsonDbIngrediente = JsonSerializer.Serialize(ingDb);
                    string jsonCurIngrediente = JsonSerializer.Serialize(ing);
                    if (ingDb != ing)
                    {
                        responseMessage = await myCustomHttpClient.PutJsonAsync(baseUrl + "/api/ingredienti/edit/" + ing.ID, ing);
                        if (!responseMessage.IsSuccessStatusCode)
                            return;
                    }
                }
            }

            // Elimino gli ingredienti non più presenti nella lista ....
            foreach (Data.Entity.Ingrediente ing in listDeleted)
            {
                await myCustomHttpClient.DeleteAsync(baseUrl + "/api/ingredienti/delete/" + ing.ID);
            }
            myDialogService.Close(true);
        }
    }

    private bool isEmtpyField()
    {
        if ((string.IsNullOrWhiteSpace(dolce.Nome)) || (dolce.Prezzo == 0) || (dolce.Qta == 0))
        {
            return true;
        }

        return false;
    }

    private void Messagge(string title, string detail, NotificationSeverity severity)
    {
        myNotificationService.Notify(new NotificationMessage { Severity = severity, Summary = title, Detail = detail, Duration = 4000 });
    }

    private async Task<bool> isDolceExists() {
        Data.Entity.Dolce dolceByName = await myCustomHttpClient.GetJsonAsync<Data.Entity.Dolce>(baseUrl + "/api/dolci/findbyname/" + dolce.Nome);
        if (dolceByName != null) {
            if (dolceByName.ID != dolce.ID)
                return true;
        }
        return false;
    }
}