// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Pasticceria.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Pasticceria;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Pasticceria.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Progetti\Pasticceria\Pasticceria\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Progetti\Pasticceria\Pasticceria\Pages\DolciDetail.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Progetti\Pasticceria\Pasticceria\Pages\DolciDetail.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/dolcidetail/{IDDolce}")]
    public partial class DolciDetail : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 77 "D:\Progetti\Pasticceria\Pasticceria\Pages\DolciDetail.razor"
       
        [Parameter] public int IDDolce { get; set; }
        string baseUrl;
        RadzenDataGrid<Data.Entity.Ingrediente> myIngGrid;
        List<Data.Entity.Ingrediente> listDeleted;

        Data.Entity.Dolce dolce;

    protected override async Task OnInitializedAsync()
    {
        baseUrl = myAppSettings.GetBaseUrl();
        if (IDDolce == 0)
        {
            dolce = new Data.Entity.Dolce();
            dolce.DataVendita = DateTime.Now.Date;
            dolce.Ingredienti = new List<Data.Entity.Ingrediente>();
        }
        else
        {
            dolce = await myCustomHttpClient.GetJsonAsync<Data.Entity.Dolce>(baseUrl + "/api/dolci/details/" + IDDolce);

            dolce.Ingredienti = await myCustomHttpClient.GetJsonAsync<List<Data.Entity.Ingrediente>>(baseUrl + "/api/ingredienti/findbyiddolce/" + IDDolce);
        }

        listDeleted = new List<Data.Entity.Ingrediente>();

        myDialogService.OnOpen += Open;
        myDialogService.OnClose += Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        return;
    }

    void Close(dynamic result)
    {
        bool b = result is Data.Entity.Ingrediente;
        if (b)
        {
            Data.Entity.Ingrediente ing = (Data.Entity.Ingrediente)result;
            if (ing.ID == 0)
            {
                dolce.Ingredienti.Add(result);
            }
        }
    }

    async Task delIngrediente(Data.Entity.Ingrediente myIngrediente)
    {
        var confirmResult = await myDialogService.Confirm("Confermi ?", "Attenzione", new ConfirmOptions() { OkButtonText = "SI", CancelButtonText = "NO" });
        if (confirmResult.HasValue && confirmResult.Value)
        {
            listDeleted.Add(myIngrediente);
            dolce.Ingredienti.Remove(myIngrediente);
        }
    }

    async Task addIngrediente()
    {
        await myDialogService.OpenAsync<IngredienteDetail>("Inserimento nuovo ingrediente",
            new Dictionary<string, object>() { { "Ingrediente", new Data.Entity.Ingrediente() }, { "Dolce", dolce } },
            new DialogOptions() { Width = "600px", Height = "400px", Resizable = true, Draggable = true });
    }

    async Task editIngrediente(Data.Entity.Ingrediente myIngrediente)
    {
        await myDialogService.OpenAsync<IngredienteDetail>("Modifica ingrediente",
                new Dictionary<string, object>() { { "Ingrediente", myIngrediente }, { "Dolce", dolce } },
                new DialogOptions() { Width = "600px", Height = "400px", Resizable = true, Draggable = true });
    }

    async Task onSave()
    {
        if (isEmtpyField())
        {
            Messagge("Attezione!", "Valorizzare tutti i campi.", NotificationSeverity.Warning);
            return;
        }

        if (await isDolceExists()) {
            Messagge("Attezione!", "Dolce già presente in archivio.", NotificationSeverity.Warning);
            return;
        }

        HttpResponseMessage responseMessage;
        // Salvataggio testata dolce ...
        if (dolce.ID == 0)
            responseMessage = await myCustomHttpClient.PostJsonAsync(baseUrl + "/api/dolci/create", dolce);
        else
            responseMessage = await myCustomHttpClient.PutJsonAsync(baseUrl + "/api/dolci/edit/" + dolce.ID, dolce);

        if (responseMessage.IsSuccessStatusCode)
        {
            int idDolce = dolce.ID;
            if (dolce.ID == 0)
            {
                var response = responseMessage.Content.ReadAsStringAsync();
                idDolce = Convert.ToInt32(response.Result);
            }

            // Salvataggio ingredienti ...
            foreach (Data.Entity.Ingrediente ing in dolce.Ingredienti)
            {
                ing.IDDolce = idDolce;

                // Effettuo la chiamata al db ...
                Data.Entity.Ingrediente ingDb = await myCustomHttpClient.GetJsonAsync<Data.Entity.Ingrediente>(baseUrl + "/api/ingredienti/details/" + ing.ID);
                if (ingDb == null)
                {
                    // Non esiste, lo inserisco ...
                    responseMessage = await myCustomHttpClient.PostJsonAsync(baseUrl + "/api/ingredienti/create", ing);
                    if (!responseMessage.IsSuccessStatusCode)
                    {
                        return;
                    }
                }
                else
                {
                    // Controllo se è diverso, nel caso lo aggiorno ...
                    string jsonDbIngrediente = JsonSerializer.Serialize(ingDb);
                    string jsonCurIngrediente = JsonSerializer.Serialize(ing);
                    if (ingDb != ing)
                    {
                        responseMessage = await myCustomHttpClient.PutJsonAsync(baseUrl + "/api/ingredienti/edit/" + ing.ID, ing);
                        if (!responseMessage.IsSuccessStatusCode)
                            return;
                    }
                }
            }

            // Elimino gli ingredienti non più presenti nella lista ....
            foreach (Data.Entity.Ingrediente ing in listDeleted)
            {
                await myCustomHttpClient.DeleteAsync(baseUrl + "/api/ingredienti/delete/" + ing.ID);
            }
            myDialogService.Close(true);
        }
    }

    private bool isEmtpyField()
    {
        if ((string.IsNullOrWhiteSpace(dolce.Nome)) || (dolce.Prezzo == 0) || (dolce.Qta == 0))
        {
            return true;
        }

        return false;
    }

    private void Messagge(string title, string detail, NotificationSeverity severity)
    {
        myNotificationService.Notify(new NotificationMessage { Severity = severity, Summary = title, Detail = detail, Duration = 4000 });
    }

    private async Task<bool> isDolceExists() {
        Data.Entity.Dolce dolceByName = await myCustomHttpClient.GetJsonAsync<Data.Entity.Dolce>(baseUrl + "/api/dolci/findbyname/" + dolce.Nome);
        if (dolceByName != null) {
            if (dolceByName.ID != dolce.ID)
                return true;
        }
        return false;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService myNotificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient myHttp { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Data.Service.AppSettings myAppSettings { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Data.Service.CustomHttpClient myCustomHttpClient { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Radzen.DialogService myDialogService { get; set; }
    }
}
#pragma warning restore 1591
